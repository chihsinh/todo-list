{"ast":null,"code":"var _jsxFileName = \"/Users/chihsin1/Documents/web-hw-on-git/todo-list/src/containers/TodoApp.js\";\nimport React, { Component } from \"react\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass TodoApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: '',\n      itemList: [],\n      count: 0,\n      show: 'all'\n      /*all, active, completed*/\n\n    };\n  }\n\n  showList() {\n    var showList = this.state.itemList;\n\n    if (this.state.show === 'active') {\n      showList = this.state.itemList.filter(item => item.isCompleted !== true);\n    } else if (this.state.show === 'completed') {\n      showList = this.state.itemList.filter(item => item.isCompleted === true);\n    }\n\n    const showContent = showList.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"todo-app__item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"todo-app__checkbox\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: showList.indexOf(item),\n            type: \"checkbox\",\n            onClick: e => this.changeItemState(showList.indexOf(item))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: showList.indexOf(item),\n            style: item.isCompleted ? {\n              background: '#26ca299b'\n            } : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: item.isCompleted ? 'todo-app__item-detail todo-app__item-detail-completed' : 'todo-app__item-detail',\n          children: item.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"img/x.png\",\n          className: \"todo-app__item-x\",\n          onClick: e => this.deleteItem(showList.indexOf(item))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 8\n        }, this)]\n      }, showList.indexOf(item), true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 5\n      }, this);\n    });\n    return showContent;\n  }\n\n  addItem() {\n    const newItem = {\n      value: this.state.newItem.slice(),\n      isCompleted: false\n    };\n    var updatedList = [...this.state.itemList];\n    updatedList.push(newItem);\n    const newCnt = this.state.count + 1;\n    this.setState({\n      itemList: updatedList,\n      newItem: '',\n      count: newCnt\n    });\n  }\n\n  changeItemState(id) {\n    var itemList = [...this.state.itemList];\n\n    if (itemList[id].isCompleted) {\n      itemList[id].isCompleted = false;\n    } else {\n      itemList[id].isCompleted = true;\n    }\n\n    this.setState({\n      itemList\n    });\n  }\n\n  deleteItem(id) {\n    const itemList = [...this.state.itemList];\n    var updatedList = itemList.filter(item => itemList.indexOf(item) !== id);\n    const newCnt = this.state.count - 1;\n    this.setState({\n      itemList: updatedList,\n      count: newCnt\n    });\n\n    if (newCnt === 0) {\n      this.setState({\n        show: 'all'\n      });\n    }\n  }\n\n  clearCompleted() {\n    var updatedList = this.state.itemList.filter(item => item.isCompleted !== true);\n    this.setState({\n      itemList: updatedList,\n      count: updatedList.length\n    });\n\n    if (this.state.count === 0) {\n      this.setState({\n        show: 'all'\n      });\n    }\n  }\n  /*\n  \tgetItemNum(){\n  \t\tconst num = this.state.itemList.filter(item => item.isCompleted !== true).length;\n  \t\tif (num !== 0) {\n  \t\t\treturn num.toString() + ' incompleted left';\n  \t\t} else {\n  \t\t\treturn 'All clear!';\n  \t\t}\n  \t}*/\n\n\n  updateState(newState) {\n    this.setState(newState);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        text: \"todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"todo-app__main\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"todo-app__input\",\n          placeholder: \"What needs to be done?\",\n          value: this.state.newItem,\n          onChange: e => this.setState({\n            newItem: e.target.value\n          }),\n          onKeyPress: e => {\n            if (e.key === 'Enter') {\n              this.addItem();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"todo-app__list\",\n          id: \"todo-list\",\n          children: this.showList()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        count: this.state.count,\n        show: this.state.show,\n        itemList: this.state.itemList,\n        clearCompleted: this.clearCompleted,\n        updateState: this.updateState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default TodoApp;","map":{"version":3,"sources":["/Users/chihsin1/Documents/web-hw-on-git/todo-list/src/containers/TodoApp.js"],"names":["React","Component","Header","Footer","TodoApp","constructor","props","state","newItem","itemList","count","show","showList","filter","item","isCompleted","showContent","map","indexOf","e","changeItemState","background","value","deleteItem","addItem","slice","updatedList","push","newCnt","setState","id","clearCompleted","length","updateState","newState","render","target","key"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\n\nclass TodoApp extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tnewItem: '',\n\t\t\titemList: [],\n\t\t\tcount: 0,\n\t\t\tshow: 'all', /*all, active, completed*/\n\t\t};\n\t}\n\n\tshowList() {\n\t\t var showList = this.state.itemList;\n\t\t if (this.state.show === 'active') {\n\t\t\t showList = this.state.itemList.filter(item => item.isCompleted !== true);\n\t\t }\n\t\t else if (this.state.show === 'completed') {\n\t\t\t showList = this.state.itemList.filter(item => item.isCompleted === true);\n\t\t }\n\t\t const showContent = showList.map(item => {\n\t\t\treturn (\n\t\t\t\t<li key={showList.indexOf(item)} className=\"todo-app__item\">\n\t\t\t\t\t\t\t<div className=\"todo-app__checkbox\">\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\tid={showList.indexOf(item)}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t\tonClick={e => this.changeItemState(showList.indexOf(item))}/>\n\t\t\t\t\t\t\t\t\t<label htmlFor={showList.indexOf(item)} style={item.isCompleted? {background: '#26ca299b'}:null}></label>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<h1 className={item.isCompleted? 'todo-app__item-detail todo-app__item-detail-completed': 'todo-app__item-detail'} >{item.value}</h1>\n\n\t\t\t\t\t\t\t<img src=\"img/x.png\" className=\"todo-app__item-x\" onClick={e => this.deleteItem(showList.indexOf(item))}/>\n\t\t\t\t\t</li>\n\t\t\t\t);\n\t\t})\n\t\treturn showContent;\n\t}\n\n\taddItem() {\n\t\tconst newItem = {\n\t\t\t\tvalue: this.state.newItem.slice(),\n\t\t\t\tisCompleted: false,\n\t\t\t};\n\n\t\tvar updatedList = [...this.state.itemList];\n\t\tupdatedList.push(newItem);\n\n\t\tconst newCnt = this.state.count + 1;\n\n\t\tthis.setState({\n\t\t\titemList: updatedList,\n\t\t\tnewItem: '',\n\t\t\tcount: newCnt,\n\t\t});\n\t}\n\n\tchangeItemState(id) {\n\t\tvar itemList = [...this.state.itemList];\n\n\t\tif (itemList[id].isCompleted) {\n\t\t\titemList[id].isCompleted = false;\n\t\t}\n\t\telse {\n\t\t\titemList[id].isCompleted = true;\n\t\t}\n\n\t\tthis.setState({\n\t\t\titemList,\n\t\t});\n\t}\n\n\tdeleteItem(id) {\n\t\tconst itemList = [...this.state.itemList];\n\t\tvar updatedList = itemList.filter(item => itemList.indexOf(item) !== id);\n\t\tconst newCnt = this.state.count - 1;\n\t\tthis.setState({\n\t\t\titemList: updatedList,\n\t\t\tcount: newCnt,\n\t\t})\n\t\tif (newCnt === 0) {\n\t\t\tthis.setState({\n\t\t\t\tshow: 'all',\n\t\t\t})\n\t\t}\n\t}\n\n\tclearCompleted(){\n\t\tvar updatedList = this.state.itemList.filter(item => item.isCompleted !== true);\n\t\tthis.setState({\n\t\t\titemList: updatedList,\n\t\t\tcount: updatedList.length,\n\t\t})\n\t\tif (this.state.count === 0) {\n\t\t\tthis.setState({\n\t\t\t\tshow: 'all',\n\t\t\t})\n\t\t}\n\t}\n\n/*\n\tgetItemNum(){\n\t\tconst num = this.state.itemList.filter(item => item.isCompleted !== true).length;\n\t\tif (num !== 0) {\n\t\t\treturn num.toString() + ' incompleted left';\n\t\t} else {\n\t\t\treturn 'All clear!';\n\t\t}\n\t}*/\n\n\tupdateState(newState){\n\t\tthis.setState(newState);\n\t}\n\n    render() {\n        return (\n            <>\n                <Header text=\"todos\" />\n                <section className=\"todo-app__main\">\n\t                <input\n\t                \tclassName=\"todo-app__input\"\n\t                \tplaceholder=\"What needs to be done?\"\n\t                \tvalue={this.state.newItem}\n\t                \tonChange={e => this.setState({newItem: e.target.value})}\n\t                \tonKeyPress={e => {if (e.key === 'Enter') {this.addItem();}}} />\n\t                <ul className=\"todo-app__list\" id=\"todo-list\">\n\t                \t{this.showList()}\n\t                </ul>\n            \t\t</section>\n\t\t\t\t\t\t\t\t\t<Footer count={this.state.count}\n\t\t\t\t\t\t\t\t\t\t\t\t\tshow={this.state.show}\n\t\t\t\t\t\t\t\t\t\t\t\t\titemList={this.state.itemList}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclearCompleted={this.clearCompleted}\n\t\t\t\t\t\t\t\t\t\t\t\t\tupdateState={this.updateState} />\n            </>\n        );\n    }\n}\n\nexport default TodoApp;\n"]},"metadata":{},"sourceType":"module"}